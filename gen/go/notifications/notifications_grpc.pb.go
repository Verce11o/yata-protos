// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: notifications/notifications.proto

package notifications

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Notifications_SubscribeToUser_FullMethodName        = "/notifications.Notifications/SubscribeToUser"
	Notifications_UnSubscribeFromUser_FullMethodName    = "/notifications.Notifications/UnSubscribeFromUser"
	Notifications_GetNotifications_FullMethodName       = "/notifications.Notifications/GetNotifications"
	Notifications_MarkNotificationAsRead_FullMethodName = "/notifications.Notifications/MarkNotificationAsRead"
	Notifications_ReadAllNotifications_FullMethodName   = "/notifications.Notifications/ReadAllNotifications"
)

// NotificationsClient is the client API for Notifications service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationsClient interface {
	SubscribeToUser(ctx context.Context, in *SubscribeToUserRequest, opts ...grpc.CallOption) (*SubscribeToUserResponse, error)
	UnSubscribeFromUser(ctx context.Context, in *UnSubscribeFromUserRequest, opts ...grpc.CallOption) (*UnSubscribeFromUserResponse, error)
	GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error)
	MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error)
	ReadAllNotifications(ctx context.Context, in *ReadAllNotificationsRequest, opts ...grpc.CallOption) (*ReadAllNotificationsResponse, error)
}

type notificationsClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationsClient(cc grpc.ClientConnInterface) NotificationsClient {
	return &notificationsClient{cc}
}

func (c *notificationsClient) SubscribeToUser(ctx context.Context, in *SubscribeToUserRequest, opts ...grpc.CallOption) (*SubscribeToUserResponse, error) {
	out := new(SubscribeToUserResponse)
	err := c.cc.Invoke(ctx, Notifications_SubscribeToUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) UnSubscribeFromUser(ctx context.Context, in *UnSubscribeFromUserRequest, opts ...grpc.CallOption) (*UnSubscribeFromUserResponse, error) {
	out := new(UnSubscribeFromUserResponse)
	err := c.cc.Invoke(ctx, Notifications_UnSubscribeFromUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) GetNotifications(ctx context.Context, in *GetNotificationsRequest, opts ...grpc.CallOption) (*GetNotificationsResponse, error) {
	out := new(GetNotificationsResponse)
	err := c.cc.Invoke(ctx, Notifications_GetNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) MarkNotificationAsRead(ctx context.Context, in *MarkNotificationAsReadRequest, opts ...grpc.CallOption) (*MarkNotificationAsReadResponse, error) {
	out := new(MarkNotificationAsReadResponse)
	err := c.cc.Invoke(ctx, Notifications_MarkNotificationAsRead_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationsClient) ReadAllNotifications(ctx context.Context, in *ReadAllNotificationsRequest, opts ...grpc.CallOption) (*ReadAllNotificationsResponse, error) {
	out := new(ReadAllNotificationsResponse)
	err := c.cc.Invoke(ctx, Notifications_ReadAllNotifications_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationsServer is the server API for Notifications service.
// All implementations must embed UnimplementedNotificationsServer
// for forward compatibility
type NotificationsServer interface {
	SubscribeToUser(context.Context, *SubscribeToUserRequest) (*SubscribeToUserResponse, error)
	UnSubscribeFromUser(context.Context, *UnSubscribeFromUserRequest) (*UnSubscribeFromUserResponse, error)
	GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error)
	MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*MarkNotificationAsReadResponse, error)
	ReadAllNotifications(context.Context, *ReadAllNotificationsRequest) (*ReadAllNotificationsResponse, error)
	mustEmbedUnimplementedNotificationsServer()
}

// UnimplementedNotificationsServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationsServer struct {
}

func (UnimplementedNotificationsServer) SubscribeToUser(context.Context, *SubscribeToUserRequest) (*SubscribeToUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubscribeToUser not implemented")
}
func (UnimplementedNotificationsServer) UnSubscribeFromUser(context.Context, *UnSubscribeFromUserRequest) (*UnSubscribeFromUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSubscribeFromUser not implemented")
}
func (UnimplementedNotificationsServer) GetNotifications(context.Context, *GetNotificationsRequest) (*GetNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedNotificationsServer) MarkNotificationAsRead(context.Context, *MarkNotificationAsReadRequest) (*MarkNotificationAsReadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkNotificationAsRead not implemented")
}
func (UnimplementedNotificationsServer) ReadAllNotifications(context.Context, *ReadAllNotificationsRequest) (*ReadAllNotificationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadAllNotifications not implemented")
}
func (UnimplementedNotificationsServer) mustEmbedUnimplementedNotificationsServer() {}

// UnsafeNotificationsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationsServer will
// result in compilation errors.
type UnsafeNotificationsServer interface {
	mustEmbedUnimplementedNotificationsServer()
}

func RegisterNotificationsServer(s grpc.ServiceRegistrar, srv NotificationsServer) {
	s.RegisterService(&Notifications_ServiceDesc, srv)
}

func _Notifications_SubscribeToUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeToUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).SubscribeToUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notifications_SubscribeToUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).SubscribeToUser(ctx, req.(*SubscribeToUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_UnSubscribeFromUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeFromUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).UnSubscribeFromUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notifications_UnSubscribeFromUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).UnSubscribeFromUser(ctx, req.(*UnSubscribeFromUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_GetNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).GetNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notifications_GetNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).GetNotifications(ctx, req.(*GetNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_MarkNotificationAsRead_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkNotificationAsReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).MarkNotificationAsRead(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notifications_MarkNotificationAsRead_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).MarkNotificationAsRead(ctx, req.(*MarkNotificationAsReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifications_ReadAllNotifications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadAllNotificationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationsServer).ReadAllNotifications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Notifications_ReadAllNotifications_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationsServer).ReadAllNotifications(ctx, req.(*ReadAllNotificationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Notifications_ServiceDesc is the grpc.ServiceDesc for Notifications service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Notifications_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.Notifications",
	HandlerType: (*NotificationsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubscribeToUser",
			Handler:    _Notifications_SubscribeToUser_Handler,
		},
		{
			MethodName: "UnSubscribeFromUser",
			Handler:    _Notifications_UnSubscribeFromUser_Handler,
		},
		{
			MethodName: "GetNotifications",
			Handler:    _Notifications_GetNotifications_Handler,
		},
		{
			MethodName: "MarkNotificationAsRead",
			Handler:    _Notifications_MarkNotificationAsRead_Handler,
		},
		{
			MethodName: "ReadAllNotifications",
			Handler:    _Notifications_ReadAllNotifications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notifications/notifications.proto",
}
